type Filter<List, Target> = List extends [infer First, ...infer Rest]
  ? First extends Target
    ? [First, ...Filter<Rest, Target>]
    : Filter<Rest, Target>
  : [];

type Count<List, Toy> = Filter<List, Toy>["length"];

type ToySack = [
  "🎸",
  "🎧",
  "👟",
  "👟",
  "💻",
  "🪀",
  "🧩",
  "🎮",
  "🎨",
  "🕹️",
  "📱",
  "🧩",
  "🧸",
  "🎧",
  "👟",
  "🚲",
  "📚",
  "⌚",
  "🎨",
  "👟",
  "🎸",
  "🧸",
  "👟",
  "🎸",
  "📱",
  "🎧",
  "🎮",
  "🎒",
  "📱",
  "🧩",
  "🧩",
  "🚲",
  "🕹️",
  "🧵",
  "📱",
  "🕹️",
  "🕰️",
  "🧢",
  "🕹️",
  "👟",
  "🧸",
  "📚",
  "🧁",
  "🧩",
  "🎸",
  "🎮",
  "🧁",
  "📚",
  "💻",
  "⌚",
  "🛹",
  "🧁",
  "🧣",
  "🪁",
  "🎸",
  "🧸",
  "🧸",
  "🧸",
  "🧩",
  "🪁",
  "🏎️",
  "🏎️",
  "🧁",
  "📚",
  "🧸",
  "🕶️",
  "💻",
  "⌚",
  "⌚",
  "🕶️",
  "🎧",
  "🎧",
  "🎧",
  "💻",
  "👟",
  "🎸",
  "💻",
  "🪐",
  "📚",
  "🎨",
  "📱",
  "🎧",
  "📱",
  "🎸",
  "🏎️",
  "👟",
  "🚲",
  "📱",
  "🚲",
  "🎸"
];

type test_1_actual = Count<ToySack, "👟">;
//   ^?
type test_1_expected = 8;
